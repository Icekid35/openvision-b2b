here is the full code, also you are allowed to add 3d models but let it not be up to 500kb,and you are to build it like i was paid $10,000 for it. also make it very mobile responsive, but first i want you to draft an outline and plan of how you will achieve the completed site and how the finished site will look like and also all the steps thatll be involved, also you dont have to follow the files structure i can delete everything and just start all over, also for all the visulas tell me exactly how i can get them becaus i want the website to have a lot of visuals and also let the homepage be very veruy very long and contain a lot of details
// package.json
{
  "name": "b2btech",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slot": "^1.1.0",
    "animate.css": "^4.1.1",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "embla-carousel-autoplay": "^8.1.6",
    "embla-carousel-react": "^8.1.6",
    "localforage": "^1.10.0",
    "lucide-react": "^0.397.0",
    "match-sorter": "^6.3.4",
    "phosphor-icons": "^1.4.2",
    "phosphor-react": "^1.4.1",
    "react": "^18.3.1",
    "react-animated-cursor": "^2.11.2",
    "react-dom": "^18.3.1",
    "react-helmet-async": "^2.0.5",
    "react-router-dom": "^6.24.0",
    "sort-by": "^0.0.2",
    "swiper": "^11.1.4",
    "tailwind-merge": "^2.3.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@rocketseat/eslint-config": "^2.2.2",
    "@types/node": "^20.14.9",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.19",
    "eslint": "^8.57.0",
    "eslint-plugin-simple-import-sort": "^12.1.0",
    "postcss": "^8.4.38",
    "prettier-plugin-tailwindcss": "^0.6.5",
    "tailwindcss": "^3.4.4",
    "typescript": "^5.2.2",
    "vite": "^5.3.1"
  }
}
// index.html
<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/png" href="/favicon.png" />

    <meta name="google-site-verification" content="RCRf5Lvm4kDRGxKXzkTs4wJAmZjDv9-yxPsC8D_Y4Tk" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="robots" content="index, follow">
    <meta property="og:locale" content="pt_BR">
    <meta property="og:type" content="website">
    <meta property="og:description" content="Automatize o óbvio e foque no negócio!">
    <meta property="og:description" content="Somos uma startup de tecnologia com foco em desenvolvimento de Software personalizados. Automatize o óbvio e foque no negócio!">
    <meta property="og:title" content="B2B Tech">
    <meta property="og:url" content="http://www.b2bmaker.tech/">
    <meta property="og:description" content="Somos uma startup de tecnologia com foco em desenvolvimento de Software personalizados. Automatize o óbvio e foque no negócio!">
    <meta property="og:site_name" content="B2B Tech">
    <meta property="article:publisher" content="https://www.instagram.com/b2b_tech/">
    <meta property="article:modified_time" content="2023-01-31T18:06:27+00:00">
    <meta property="og:image" content="https://www.instagram.com/p/C8FGlczO6vX/?img_index=1">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="B2B Tech">
    <meta name="twitter:description" content="Automatize o óbvio e foque no negócio!">
    <link rel="canonical" href="http://www.b2bmaker.tech/">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&display=swap" rel="stylesheet">

    <title>b2b.tech</title>
  </head>
  <body class="antialiased dark:bg-zinc-900 bg-zinc-100 text-pretty outline-none overflow-x-hidden">
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

//components.json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/global.css",
    "baseColor": "gray",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}

// src/routes.tsx
import { createBrowserRouter } from 'react-router-dom'

import { AppLayout } from './pages/_layouts'
import { Home } from './pages/app/home'

export const router = createBrowserRouter([
  {
    path: '/',
    element: <AppLayout />,
    children: [
      {
        path: '/',
        element: <Home />,
      },
    ],
  },
])

// src/main.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'

import { App } from '@/App'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

//src/global.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 224 71.4% 4.1%;

    --card: 0 0% 100%;
    --card-foreground: 224 71.4% 4.1%;

    --popover: 0 0% 100%;
    --popover-foreground: 224 71.4% 4.1%;

    --primary: 220.9 39.3% 11%;
    --primary-foreground: 210 20% 98%;

    --secondary: 220 14.3% 95.9%;
    --secondary-foreground: 220.9 39.3% 11%;

    --muted: 220 14.3% 95.9%;
    --muted-foreground: 220 8.9% 46.1%;

    --accent: 220 14.3% 95.9%;
    --accent-foreground: 220.9 39.3% 11%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 20% 98%;

    --border: 220 13% 91%;
    --input: 220 13% 91%;
    --ring: 224 71.4% 4.1%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 224 71.4% 4.1%;
    --foreground: 210 20% 98%;

    --card: 224 71.4% 4.1%;
    --card-foreground: 210 20% 98%;

    --popover: 224 71.4% 4.1%;
    --popover-foreground: 210 20% 98%;

    --primary: 210 20% 98%;
    --primary-foreground: 220.9 39.3% 11%;

    --secondary: 215 27.9% 16.9%;
    --secondary-foreground: 210 20% 98%;

    --muted: 215 27.9% 16.9%;
    --muted-foreground: 217.9 10.6% 64.9%;

    --accent: 215 27.9% 16.9%;
    --accent-foreground: 210 20% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 20% 98%;

    --border: 215 27.9% 16.9%;
    --input: 215 27.9% 16.9%;
    --ring: 216 12.2% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  html {
    --cursor-color: #8b5cf6
  }
  
  html.dark-mode {
    --cursor-color: #18181b
  }
  body {
    @apply bg-background text-foreground;
  }
  body::-webkit-scrollbar { 
    display: none;
  }
}


//src/app.tsx
import './global.css'

import { useEffect, useState } from 'react'
import AnimatedCursor from 'react-animated-cursor'
import { Helmet, HelmetProvider } from 'react-helmet-async'
import { RouterProvider } from 'react-router-dom'

import { ThemeProvider } from '@/components/theme/theme-provider'
import { router } from '@/routes'

export function App() {
  const [isMobile, setIsMobile] = useState(false)

  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth <= 768)
    }

    handleResize()

    window.addEventListener('resize', handleResize)

    return () => {
      window.removeEventListener('resize', handleResize)
    }
  }, [])

  return (
    <HelmetProvider>
      <ThemeProvider storageKey="b2btech-theme" defaultTheme="dark">
        <Helmet titleTemplate="%s | b2b.tech" />
        {!isMobile && (
          <AnimatedCursor
            innerSize={12}
            outerSize={35}
            innerScale={1}
            outerScale={2.3}
            outerAlpha={0}
            trailingSpeed={3}
            outerStyle={{
              border: '2px solid var(--cursor-color)',
            }}
            innerStyle={{
              backgroundColor: 'var(--cursor-color)',
            }}
          />
        )}
        <RouterProvider router={router} />
      </ThemeProvider>
    </HelmetProvider>
  )
}


//src/pages/app/home/cases.tsx
import { useEffect, useRef, useState } from 'react'

import Eternidade from '@/assets/images/eternidade.jpg'
import HermesChat from '@/assets/images/hermeschat.jpg'
import Ecommerce from '@/assets/images/plataforma e-commerce.jpg'
import Serenidade from '@/assets/images/serenidade.jpg'
import { cases } from '@/data/cases'

export interface Case {
  id: string
  title: string
  description: string
  imageKey: string
}

const imageMap: { [key: string]: string } = {
  eternidade: Eternidade,
  ecommerce: Ecommerce,
  hermeschat: HermesChat,
  serenidade: Serenidade,
}

export function Cases() {
  const [currentSlide, setCurrentSlide] = useState<number>(0)
  const [isVisible, setIsVisible] = useState<boolean>(false)
  const sectionRef = useRef<HTMLElement>(null)

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true)
          observer.disconnect()
        }
      },
      {
        threshold: 0.1,
      },
    )

    if (sectionRef.current) {
      observer.observe(sectionRef.current)
    }

    return () => {
      if (sectionRef.current) {
        observer.unobserve(sectionRef.current)
      }
    }
  }, [])

  const nextSlide = () => {
    setCurrentSlide((prevSlide) =>
      prevSlide === cases.length - 1 ? 0 : prevSlide + 1,
    )
  }

  const prevSlide = () => {
    setCurrentSlide((prevSlide) =>
      prevSlide === 0 ? cases.length - 1 : prevSlide - 1,
    )
  }

  return (
    <section
      ref={sectionRef}
      className="relative z-20 my-[17rem] flex flex-col gap-16 p-4 md:static md:my-32 md:flex-row md:p-0"
      id="cases"
    >
      <div className="flex flex-col items-start justify-start space-y-3">
        <span className="backdrop-blur-10 dark:bg-violet-80 flex w-auto items-center justify-center rounded-2xl bg-violet-600 px-2 text-sm font-semibold leading-6 text-zinc-100 dark:bg-opacity-10 dark:text-violet-500 md:w-20 md:p-1 md:text-base">
          Cases
        </span>
        <h1
          className={`w-auto transform text-4xl font-bold leading-[3rem] tracking-tighter transition-transform duration-1000 ease-out md:w-96 md:text-6xl md:leading-[4.5rem] ${
            isVisible ? 'translate-y-0' : 'translate-y-full'
          }`}
        >
          Projetos que Trabalhamos
        </h1>
        <p
          className={`w-auto transform text-lg leading-6 -tracking-tight text-zinc-800 transition-transform delay-300 duration-1000 ease-out dark:text-zinc-400 md:w-96 ${
            isVisible ? 'translate-y-0' : 'translate-y-full'
          }`}
        >
          Na B2B Tech, orgulhamo-nos de nossos projetos inovadores e
          personalizados, que trazem soluções eficientes e transformadoras para
          nossos clientes. Aqui estão alguns dos projetos mais notáveis que
          tivemos o prazer de desenvolver:
        </p>

        <div className="flex items-center gap-6 pt-3 md:gap-9 md:pt-6">
          <div className="flex space-x-1 md:space-x-2">
            {cases.map((_, index) => (
              <button
                key={index}
                className={`h-2 w-2 rounded-full ${
                  index === currentSlide
                    ? 'bg-violet-500'
                    : 'bg-zinc-400 dark:bg-zinc-700'
                }`}
                onClick={() => setCurrentSlide(index)}
              />
            ))}
          </div>

          <button
            className="ml-12 h-14 w-14 rounded-full bg-violet-500 text-zinc-50 transition-transform duration-300 ease-in-out hover:scale-125 hover:shadow-lg dark:text-zinc-900 md:ml-[5.5rem] md:h-12 md:w-12"
            onClick={prevSlide}
          >
            &lt;
          </button>
          <button
            className="h-14 w-14 rounded-full bg-violet-500 text-zinc-50 transition-transform duration-300 ease-in-out hover:scale-125 hover:shadow-lg dark:text-zinc-900 md:h-12 md:w-12"
            onClick={nextSlide}
          >
            &gt;
          </button>
        </div>
      </div>

      <div className="relative h-96 w-auto overflow-hidden md:h-full md:w-full">
        <div
          className="flex h-96 w-full flex-col transition-transform duration-500 ease-in-out"
          style={{ transform: `translateY(${-currentSlide * 100}%)` }}
        >
          {cases.map((caseData: Case, index) => (
            <div
              key={index}
              className={`relative h-96 w-full flex-shrink-0 transition-opacity duration-500 ${
                index === currentSlide ? 'z-10 opacity-100' : 'z-0 opacity-0'
              }`}
            >
              <img
                src={imageMap[caseData.imageKey]}
                alt={`Slide ${index + 1}`}
                className="h-auto w-auto rounded-lg object-cover md:h-full md:w-full"
              />
              <div className="absolute left-0 right-0 top-20 z-20 rounded-md bg-violet-700/80 p-6 shadow-sm backdrop-blur-md dark:bg-violet-800/80 md:bottom-0 md:top-[7rem] md:ml-auto md:w-[35rem]">
                <article className="relative space-y-2">
                  <span className="font-bold text-violet-500">
                    {caseData.id}
                  </span>
                  <h3 className="font-bold">{caseData.title}</h3>
                  <p className="pb-2 md:pb-3">{caseData.description}</p>
                  <span className="block h-1.5 w-8 rounded-sm bg-violet-500"></span>
                </article>
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>
  )
}


//src/pages/app/home/contact.tsx
import { Instagram, Linkedin, PhoneCall } from 'lucide-react'
import { WhatsappLogo } from 'phosphor-react'
import { useEffect, useRef, useState } from 'react'

import Circles from '@/assets/images/circles.png'
import WhatsAppB2B from '@/assets/logos/whatsapp-b2b.png'
import { Button } from '@/components/ui/button'

export function Contact() {
  const [isHoveredPrimary, setIsHoveredPrimary] = useState(false)
  const [isHoveringSecondary, setIsHoveringSecondary] = useState(false)
  const [isVisible, setIsVisible] = useState(false)
  const sectionRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true)
          observer.disconnect()
        }
      },
      {
        threshold: 0.1,
      },
    )

    if (sectionRef.current) {
      observer.observe(sectionRef.current)
    }

    return () => {
      if (sectionRef.current) {
        observer.unobserve(sectionRef.current)
      }
    }
  }, [])

  return (
    <section
      id="contato"
      ref={sectionRef}
      className="mt-72 w-full p-4 md:my-24 md:p-0"
    >
      <div className="relative z-20 flex h-[19rem] w-full items-center justify-center overflow-hidden rounded-xl border-x border-violet-600 dark:border-violet-500 md:ml-0 md:w-calc md:justify-between md:p-24">
        <div
          className={`absolute z-30 transform px-5 transition-transform duration-1000 ease-out md:static md:z-0 md:px-0 ${isVisible ? 'translate-x-0' : '-translate-x-full'}`}
        >
          <span className="text-sm font-semibold text-zinc-700 dark:text-violet-500">
            Contato
          </span>
          <h3 className="max-w-96 text-3xl font-bold tracking-tighter text-violet-600 dark:text-zinc-100">
            Interessado?
          </h3>
          <h3 className="max-w-96 text-3xl font-bold leading-relaxed tracking-tighter text-violet-600 dark:text-zinc-100">
            Vamos entrar em contato!
          </h3>
        </div>

        <img
          src={Circles}
          alt="Círculos aritméticos"
          className="absolute bottom-0 right-0 top-[-10rem] z-10 h-auto w-auto overflow-x-hidden md:right-[-3rem]"
        />

        <a
          href="https://api.whatsapp.com/send/?phone=5521965194348"
          target="_blank"
          className={`relative bottom-[-8rem] z-20 block transform transition-transform duration-1000 ease-out md:bottom-0 ${isVisible ? 'translate-x-0' : 'translate-x-full'}`}
          rel="noopener noreferrer"
        >
          <Button className="mb-8 flex w-72 items-center justify-center rounded-full bg-violet-600 px-5 py-6 text-base font-semibold hover:bg-violet-500 md:mb-0 md:w-full md:py-3">
            Entrar em contato
          </Button>
        </a>
      </div>

      <div className="mt-14 flex flex-col items-center justify-between gap-8 md:flex-row md:gap-1">
        <div className="flex w-full flex-col items-start justify-start space-y-1 md:w-auto">
          <span className="w-auto text-start text-base leading-[22px] md:w-11/12">
            <img
              src={WhatsAppB2B}
              alt="Logo B2B Tech"
              className="h-4.5 mb-6 w-20"
            />
          </span>
          <span className="md:w-12/12 w-auto text-start text-base leading-[22px] text-zinc-800 dark:text-zinc-400">
            CNPJ: 48.768.751/0001-89
          </span>
          <span className="w-auto text-start text-base leading-[22px] text-zinc-800 dark:text-zinc-400 md:w-11/12">
            comercial@b2bmaker.tech
          </span>
          <span className="w-auto text-start text-base leading-[22px] text-zinc-800 dark:text-zinc-400 md:w-11/12">
            B2B Tech © {new Date().getFullYear()}
          </span>
        </div>

        <div className="flex w-full flex-col items-start justify-start gap-5 md:w-auto">
          <strong className="text-start text-lg leading-6 text-zinc-800 dark:text-zinc-50">
            Fale conosco
          </strong>
          <span className="w-auto text-start text-base leading-[22px] text-zinc-800 dark:text-zinc-400">
            comercial@b2bmaker.tech
          </span>

          <div className="flex items-center justify-start gap-5">
            <a
              href="https://www.instagram.com/b2b_tech/"
              target="_blank"
              rel="noreferrer"
              className={`relative z-20 block transform transition-transform duration-1000 ease-out`}
            >
              <Instagram
                size={40}
                className="text-zinc-800 hover:text-violet-700 dark:text-zinc-50 dark:hover:brightness-75"
              />
            </a>

            <a
              href="https://www.linkedin.com/company/b2b-tech-maker/"
              target="_blank"
              rel="noreferrer"
              className={`relative z-20 block transform transition-transform duration-1000 ease-out`}
            >
              <Linkedin
                size={40}
                className="text-zinc-800 hover:text-violet-700 dark:text-zinc-50 dark:hover:brightness-75"
              />
            </a>
          </div>
        </div>

        <div className="flex w-full flex-col items-start justify-center gap-5 md:w-auto">
          <strong className="text-start text-lg leading-6 text-zinc-800 dark:text-zinc-50">
            Contato
          </strong>
          <a
            href="tel:021965194348"
            data-phone-number="021965194348"
            className={`relative z-20 block w-full transform transition-transform duration-1000 ease-out`}
          >
            <Button
              className="w-full overflow-hidden rounded-sm bg-transparent p-6 text-base font-semibold text-zinc-800 ring-1 ring-violet-500 hover:bg-transparent hover:bg-violet-500 hover:text-zinc-200 dark:text-zinc-200 md:w-full"
              onMouseEnter={() => setIsHoveredPrimary(true)}
              onMouseLeave={() => setIsHoveredPrimary(false)}
            >
              <span
                className={`flex transform items-center justify-center gap-2 transition-transform duration-1000 ease-out ${isHoveredPrimary ? 'animate-bounce' : ''}`}
              >
                <PhoneCall />
                Entrar em contato
              </span>
            </Button>
          </a>

          <a
            href="https://api.whatsapp.com/send/?phone=5521965194348"
            target="_blank"
            className={`relative z-20 block w-full transform transition-transform duration-1000 ease-out`}
            rel="noopener noreferrer"
          >
            <Button
              className="w-full overflow-hidden rounded-sm bg-violet-600 p-6 text-base font-semibold hover:bg-violet-500 md:w-full"
              onMouseEnter={() => setIsHoveringSecondary(true)}
              onMouseLeave={() => setIsHoveringSecondary(false)}
            >
              <span
                className={`relative flex transform items-center justify-center gap-1.5 transition-transform duration-1000 ease-out ${isHoveringSecondary ? 'animate-bounce' : ''}`}
              >
                <WhatsappLogo size={28} />
                Enviar mensagem
              </span>
            </Button>
          </a>
        </div>
      </div>
    </section>
  )
}


//src/pages/app/home/footer.tsx
export function Footer() {
  return (
    <footer className="mt-3 flex h-8 w-full items-center justify-center bg-violet-500 text-zinc-100 dark:bg-zinc-800 dark:text-zinc-100 md:mt-0 md:w-screen">
      <span className="w-auto text-xs font-semibold leading-relaxed tracking-wide">
        © B2B Tech {new Date().getFullYear()} - Todos os direitos reservados
      </span>
    </footer>
  )
}

//src/pages/app/home/hero.tsx
import { useEffect, useState } from 'react'

import Circles from '@/assets/images/circles.png'
import { Button } from '@/components/ui/button'

export function Hero() {
  const [isHovered, setIsHovered] = useState(false)
  const [isVisible, setIsVisible] = useState(false)

  useEffect(() => {
    setIsVisible(true)
  }, [])

  return (
    <section className="relative mt-[-21rem] grid grid-cols-1 place-items-center p-4 md:mt-0 md:grid-cols-2 md:p-0">
      <div className="order-2 flex flex-col items-start justify-center space-y-6 overflow-hidden md:order-1 md:space-y-9">
        <span className="flex w-auto items-center justify-center rounded-2xl bg-violet-600 px-2 text-sm font-semibold leading-6 text-zinc-100 backdrop-blur-sm dark:bg-violet-800 dark:bg-opacity-10 dark:text-violet-500 md:w-64 md:p-1 md:text-base">
          Automatizamos o seu negócio
        </span>
        <h1
          className={`w-auto transform text-4xl font-bold leading-[3rem] tracking-tighter transition-transform duration-1000 ease-out md:text-6xl md:leading-[4.5rem] ${isVisible ? 'translate-y-0' : 'translate-y-full'}`}
        >
          Automatize o óbvio e pense no negócio
        </h1>
        <p
          className={`md:w-4/4 w-auto transform text-lg leading-6 text-zinc-800 transition-transform delay-300 duration-1000 ease-out dark:text-zinc-400 ${isVisible ? 'translate-y-0' : 'translate-y-full'}`}
        >
          Somos uma empresa dedicada ao desenvolvimento de software que
          transforma processos complexos em soluções automatizadas, permitindo
          que você se concentre no que realmente importa: o crescimento do seu
          negócio.
        </p>
        <a href="#serviços">
          <Button
            className={`flex w-[19rem] transform items-center justify-center overflow-hidden scroll-smooth rounded-sm bg-violet-600 px-5 py-6 text-base font-semibold transition-transform duration-1000 ease-out hover:bg-violet-600 md:w-full md:py-3 ${isVisible ? 'translate-x-0' : '-translate-x-full'}`}
            onMouseEnter={() => setIsHovered(true)}
            onMouseLeave={() => setIsHovered(false)}
          >
            <span
              className={`relative inline-block transform transition-transform duration-1000 ease-out ${isHovered ? 'animate-bounce-carousel' : ''}`}
            >
              Conheça nossos serviços
            </span>
          </Button>
        </a>
      </div>

      <div className="order-1 flex h-96 w-auto items-center justify-center">
        <img
          src={Circles}
          alt="Circuitos aritméticos"
          className="h-auto w-auto md:h-full md:w-full"
        />
      </div>
    </section>
  )
}


//src/pages/app/home/index.tsx
import { Cases } from './cases'
import { Contact } from './contact'
import { Footer } from './footer'
import { Hero } from './hero'
import { Partners } from './partners'
import { Services } from './services'
import { Testimonials } from './testimonials'

export function Home() {
  return (
    <>
      <main className="flex max-w-6xl flex-col items-center justify-center">
        <Hero />
        <Services />
        <Partners />
        <Cases />
        <Testimonials />
        <Contact />
        <Footer />
      </main>
    </>
  )
}


//src/pages/app/home/partners.tsx
import { useEffect, useRef, useState } from 'react'

import { PartnerCarousel } from '@/lib/partner-carousel'

export function Partners() {
  const [isVisible, setIsVisible] = useState(false)
  const sectionRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true)
          observer.disconnect()
        }
      },
      {
        threshold: 0.1,
      },
    )

    if (sectionRef.current) {
      observer.observe(sectionRef.current)
    }

    return () => {
      if (sectionRef.current) {
        observer.unobserve(sectionRef.current)
      }
    }
  }, [])

  return (
    <div
      ref={sectionRef}
      className="relative w-full overflow-x-clip md:overflow-hidden"
    >
      <div
        className={`absolute bottom-0 left-0 right-0 top-[-1rem] w-auto transform transition-transform duration-1000 ease-out md:static ${isVisible ? 'translate-x-0' : 'translate-x-full'}`}
      >
        <PartnerCarousel />
      </div>
    </div>
  )
}


//src/pages/app/home/services.tsx
import {
  ChevronRight,
  Cpu,
  LayoutPanelLeft,
  MonitorDot,
  Workflow,
} from 'lucide-react'
import { useEffect, useRef, useState } from 'react'

import Image2 from '@/assets/images/image2.jpg'
import Image3 from '@/assets/images/image3.jpg'
import Image4 from '@/assets/images/image4.jpg'
import Image1 from '@/assets/images/imge1.jpg'
import GlobalPaxBorder from '@/assets/logos/border-global-pax.png'
import GloriaBorder from '@/assets/logos/border-gloria.png'
import GlobalPax from '@/assets/logos/global-pax.png'
import Gloria from '@/assets/logos/gloria.png'
import { services } from '@/data/services'

interface Services {
  id: string
  title: string
  description: string
  icon: string
}

export function Services() {
  const [selectedService, setSelectedService] = useState<Services>(services[0])
  const [currentImage, setCurrentImage] = useState(Image1)
  const [animate, setAnimate] = useState(false)
  const [isVisible, setIsVisible] = useState(false)

  const sectionRef = useRef<HTMLElement>(null)

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true)
          observer.disconnect()
        }
      },
      {
        threshold: 0.1,
      },
    )

    if (sectionRef.current) {
      observer.observe(sectionRef.current)
    }

    return () => {
      if (sectionRef.current) {
        observer.unobserve(sectionRef.current)
      }
    }
  }, [])

  useEffect(() => {
    if (animate) {
      const timer = setTimeout(() => {
        setAnimate(false)
      }, 600)

      return () => clearTimeout(timer)
    }
  }, [animate])

  const handleServices = (service: Services) => {
    setAnimate(true)
    setTimeout(() => {
      setSelectedService(service)
      switch (service.title) {
        case 'Criação de Software Personalizado':
          setCurrentImage(Image1)
          break
        case 'Automação de Processos':
          setCurrentImage(Image2)
          break
        case 'Consultoria em Tecnologia':
          setCurrentImage(Image3)
          break
        case 'Integração de Sistemas':
          setCurrentImage(Image4)
          break
        default:
          setCurrentImage(Image1)
      }
    }, 300)
  }

  return (
    <section
      ref={sectionRef}
      id="serviços"
      className="relative z-20 mb-14 mt-32 flex flex-col items-start justify-center space-y-8 p-4 md:static md:mb-0 md:mt-48 md:p-0"
    >
      <span className="backdrop-blur-10 dark:bg-violet-80 flex w-auto items-start justify-center rounded-2xl bg-violet-600 px-2 text-sm font-semibold leading-6 text-zinc-100 dark:bg-opacity-10 dark:text-violet-500 md:w-24 md:p-1 md:text-base">
        Serviços
      </span>
      <h1
        className={`w-auto transform text-4xl font-bold leading-[3rem] tracking-tighter transition-transform duration-1000 ease-out md:w-full md:text-6xl md:leading-[4.5rem] ${isVisible ? 'translate-y-0' : 'translate-y-full'}`}
      >
        Como podemos ajudar?
      </h1>

      <div className="flex flex-wrap gap-4">
        {services.map((service) => {
          return (
            <button
              key={service.id}
              onClick={() => handleServices(service)}
              className={`flex max-w-max transform items-center justify-center gap-2 rounded-full px-3 py-2 text-sm font-semibold text-zinc-700 ring-1 ring-zinc-500 transition-transform delay-300 duration-1000 ease-out active:bg-violet-500 active:text-zinc-50 dark:text-zinc-400 dark:ring-zinc-400 dark:active:text-zinc-900 dark:active:ring-zinc-500 ${
                selectedService.id === service.id
                  ? 'bg-violet-500 text-zinc-50 dark:text-zinc-900 dark:ring-zinc-500'
                  : ''
              } ${isVisible ? 'translate-y-0' : 'translate-y-full'}`}
            >
              <div>{renderIcon(service.icon)}</div>
              {service.title}
            </button>
          )
        })}
      </div>

      <div className="flex flex-col gap-20 md:flex-row">
        <div
          className={`order-2 space-y-3 transition-transform duration-700 ease-in-out md:order-1 ${animate ? 'translate-y-full opacity-0' : 'translate-y-0 opacity-100'}`}
        >
          <h3 className="text-lg font-semibold text-violet-700 dark:text-violet-500">
            {selectedService.title}
          </h3>
          <p className="h-auto w-auto pb-5 text-lg leading-relaxed tracking-normal text-zinc-800 dark:text-zinc-400 md:w-[29rem]">
            {selectedService.description}
          </p>
          <div className="h-10">
            <a
              href="https://api.whatsapp.com/send/?phone=5521965194348"
              target="_blank"
              rel="noopener noreferrer"
              className="group flex h-auto items-center justify-start gap-1 text-base font-semibold text-violet-700 dark:font-normal dark:text-violet-500 md:text-base"
            >
              Fale conosco
              <ChevronRight
                size="20"
                className="transform transition-transform duration-700 ease-in-out group-hover:translate-x-2"
              />
            </a>
          </div>

          <div className="flex h-32 items-center justify-start gap-14 pt-24 md:gap-24">
            <div className="relative h-28 w-28">
              <img
                className="absolute inset-0 z-10 m-auto h-20 object-contain"
                loading="lazy"
                src={GlobalPax}
                alt="Logo Global Pax"
              />
              <img
                src={GlobalPaxBorder}
                className="animate-spin opacity-85"
                alt="Bordas escritas Global Pax"
              />
            </div>

            <div className="relative h-28 w-28">
              <img
                className="absolute inset-0 z-10 m-auto h-20 object-contain"
                loading="lazy"
                src={Gloria}
                alt="Logo Santa Casa da Gloŕia"
              />
              <img
                src={GloriaBorder}
                className="animate-spin opacity-85"
                alt="Bordas escritas Gloria"
              />
            </div>
          </div>
        </div>

        <div
          className={`order-1 flex w-auto flex-col justify-between overflow-hidden rounded-sm border border-violet-500 transition-opacity duration-700 ease-in-out md:h-96`}
        >
          <header className="flex h-10 w-auto items-center space-x-2 rounded-sm bg-violet-700 px-2 md:h-12 md:w-full">
            <i className="h-2.5 w-2.5 rounded-full bg-gray-900"></i>
            <i className="h-2.5 w-2.5 rounded-full bg-gray-700"></i>
            <i className="h-2.5 w-2.5 rounded-full bg-gray-500"></i>
          </header>

          <img
            className={`z-10 h-full w-full object-contain shadow-none transition-opacity duration-500 ${animate ? 'translate-y-full transform opacity-0' : 'opacity-100'}`}
            src={currentImage}
            alt="imagem do projeto"
          />
        </div>
      </div>
    </section>
  )
}

const renderIcon = (iconName: string) => {
  switch (iconName) {
    case 'LayoutPanelLeft':
      return <LayoutPanelLeft size="16" />
    case 'Workflow':
      return <Workflow size="16" />
    case 'Cpu':
      return <Cpu size="16" />
    case 'MonitorDot':
      return <MonitorDot size="16" />
    default:
      return null
  }
}
//src/pages/_layouts/index.tsx
import { Outlet } from 'react-router-dom'

import { Header } from '@/pages/app/home/header'

export function AppLayout() {
  return (
    <div className="relative mx-auto flex h-screen items-center justify-center text-zinc-800 dark:bg-zinc-900 dark:text-zinc-100">
      <div>
        <Header />
      </div>
      <div className="absolute top-56">
        <Outlet />
      </div>
    </div>
  )
}

//src/lib/partner-carousel.tsx
import 'swiper/swiper-bundle.css'

import { useEffect, useState } from 'react'
import SwiperCore from 'swiper'
import { Autoplay, Navigation, Pagination } from 'swiper/modules'
import { Swiper, SwiperSlide } from 'swiper/react'

import BrasilPax from '@/assets/partners/brasil-pax.png'
import Eternidade from '@/assets/partners/eternidade.png'
import FarolEterno from '@/assets/partners/farol-eterno.png'
import Global from '@/assets/partners/global.png'
import Gloria from '@/assets/partners/gloria.png'
import Kn from '@/assets/partners/kn.png'
import MonteCarmelo from '@/assets/partners/monte-carmelo.png'
import Top from '@/assets/partners/top.png'
import { partners } from '@/data/partners'

export interface PartnerCarousel {
  imageKey: string
}

const imageMap: { [key: string]: string } = {
  brasilpax: BrasilPax,
  eternidade: Eternidade,
  faroleterno: FarolEterno,
  global: Global,
  gloria: Gloria,
  montecarmelo: MonteCarmelo,
  top: Top,
  kn: Kn,
}

SwiperCore.use([Pagination, Navigation, Autoplay])

export function PartnerCarousel() {
  const [isVisible, setIsVisible] = useState(false)

  useEffect(() => {
    setIsVisible(true)
  }, [])

  return (
    <section className="z-0 my-16 max-w-6xl overflow-x-hidden overflow-y-hidden p-4 md:my-32 md:p-0">
      <div className="w-[60rem] md:w-full">
        <p
          className={`mb-6 transform text-start text-base font-semibold text-violet-700 transition-transform duration-1000 ease-out dark:text-violet-500 md:text-base ${isVisible ? 'translate-y-0' : 'translate-y-full'}`}
        >
          | &nbsp;Alguns de nossos parceiros
        </p>
        <div
          className={`w-auto transform text-4xl font-bold leading-[3.5rem] tracking-tighter transition-transform duration-1000 ease-out md:text-7xl md:leading-[4.5rem] ${isVisible ? 'translate-y-0' : 'translate-y-full'}`}
        >
          <Swiper
            spaceBetween={32}
            slidesPerView={6}
            pagination={{
              clickable: true,
              el: `swiper-container swiper-container-testClass`,
              bulletClass: `swiper-pagination-bullet swiper-pagination-testClass`,
            }}
            loop={true}
            autoplay={{
              delay: 3000,
              disableOnInteraction: false,
            }}
          >
            {partners.map((image, index) => (
              <SwiperSlide key={index} className="flex justify-center">
                <a href="#" role="group" aria-label="1 / 7">
                  <img
                    src={imageMap[image.imageKey]}
                    className="w-full max-w-[150px] overflow-y-hidden rounded-sm border border-zinc-400 pb-[-3rem] dark:border-zinc-800"
                    alt="Nome do parceiro"
                  />
                </a>
              </SwiperSlide>
            ))}
          </Swiper>
        </div>
      </div>
    </section>
  )
}

//src/lib/util.ts
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


//sr/components/theme-provider.tsx
import { createContext, useContext, useEffect, useState } from 'react'

type Theme = 'dark' | 'light' | 'system'

type ThemeProviderProps = {
  children: React.ReactNode
  defaultTheme?: Theme
  storageKey?: string
}

type ThemeProviderState = {
  theme: Theme
  setTheme: (theme: Theme) => void
}

const initialState: ThemeProviderState = {
  theme: 'system',
  setTheme: () => null,
}

const ThemeProviderContext = createContext<ThemeProviderState>(initialState)

export function ThemeProvider({
  children,
  defaultTheme = 'system',
  storageKey = 'vite-ui-theme',
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(
    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme,
  )

  useEffect(() => {
    const root = window.document.documentElement

    root.classList.remove('light', 'dark')

    if (theme === 'system') {
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)')
        .matches
        ? 'dark'
        : 'light'

      root.classList.add(systemTheme)
      return
    }

    root.classList.add(theme)
  }, [theme])

  const value = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme)
      setTheme(theme)
    },
  }

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  )
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext)

  if (context === undefined)
    throw new Error('useTheme must be used within a ThemeProvider')

  return context
}
//src/components/theme/theme-toggle.tsx
import { Moon, Sun } from 'lucide-react'

import { useTheme } from '@/components/theme/theme-provider'
import { Button } from '@/components/ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'

export function ThemeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme('light')}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('dark')}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('system')}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
//src/components/ui/button.tsx
import { Slot } from '@radix-ui/react-slot'
import { cva, type VariantProps } from 'class-variance-authority'
import * as React from 'react'

import { cn } from '@/lib/utils'

const buttonVariants = cva(
  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive:
          'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline:
          'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
        secondary:
          'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  },
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button'
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  },
)
Button.displayName = 'Button'

export { Button, buttonVariants }

// src/components/ui/card.tsx
import * as React from 'react'

import { cn } from '@/lib/utils'

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      'rounded-lg border bg-card text-card-foreground shadow-sm',
      className,
    )}
    {...props}
  />
))
Card.displayName = 'Card'

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex flex-col space-y-1.5 p-6', className)}
    {...props}
  />
))
CardHeader.displayName = 'CardHeader'

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      'text-2xl font-semibold leading-none tracking-tight',
      className,
    )}
    {...props}
  />
))
CardTitle.displayName = 'CardTitle'

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
))
CardDescription.displayName = 'CardDescription'

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
))
CardContent.displayName = 'CardContent'

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex items-center p-6 pt-0', className)}
    {...props}
  />
))
CardFooter.displayName = 'CardFooter'

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

// carousel.tsx
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from 'embla-carousel-react'
import { ArrowLeft, ArrowRight } from 'lucide-react'
import * as React from 'react'

import { Button } from '@/components/ui/button'
import { cn } from '@/lib/utils'

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: 'horizontal' | 'vertical'
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error('useCarousel must be used within a <Carousel />')
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = 'horizontal',
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref,
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === 'horizontal' ? 'x' : 'y',
      },
      plugins,
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === 'ArrowLeft') {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === 'ArrowRight') {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext],
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on('reInit', onSelect)
      api.on('select', onSelect)

      return () => {
        api?.off('select', onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api,
          opts,
          orientation:
            orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn('relative', className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  },
)
Carousel.displayName = 'Carousel'

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          'flex w-full',
          orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',
          className,
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = 'CarouselContent'

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        'h-full w-full shrink-0 grow-0 basis-full',
        orientation === 'horizontal' ? 'pl-x' : 'pt-4',
        className,
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = 'CarouselItem'

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = 'outline', size = 'icon', ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        'absolute h-8 w-8 rounded-full',
        orientation === 'horizontal'
          ? '-left-12 top-1/2 -translate-y-1/2'
          : '-top-12 left-1/2 -translate-x-1/2 rotate-90',
        className,
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = 'CarouselPrevious'

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = 'outline', size = 'icon', ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        'absolute h-8 w-8 rounded-full',
        orientation === 'horizontal'
          ? '-right-12 top-1/2 -translate-y-1/2'
          : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',
        className,
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = 'CarouselNext'

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

//dropdown-menu.tsx
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'
import { Check, ChevronRight, Circle } from 'lucide-react'
import * as React from 'react'

import { cn } from '@/lib/utils'

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',
      inset && 'pl-8',
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className,
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className,
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      'px-2 py-1.5 text-sm font-semibold',
      inset && 'pl-8',
      className,
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn('ml-auto text-xs tracking-widest opacity-60', className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = 'DropdownMenuShortcut'

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

//seperator.tsx
import * as SeparatorPrimitive from '@radix-ui/react-separator'
import * as React from 'react'

import { cn } from '@/lib/utils'

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = 'horizontal', decorative = true, ...props },
    ref,
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        'shrink-0 bg-border',
        orientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]',
        className,
      )}
      {...props}
    />
  ),
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
//src/pages/app/home/heder.tsx
import { useState } from 'react'

export function BurgerMenu() {
  const [isOpen, setOpen] = useState(false)

  const toggleMenu = () => {
    setOpen(!isOpen)
  }

  return (
    <div className="flex items-center justify-between px-4 py-8">
      <nav>
        <section className="MOBILE-MENU flex">
          <div className="HAMBURGER-ICON space-y-2" onClick={toggleMenu}>
            <button className="group relative">
              <div className="relative flex h-[50px] w-[50px] transform items-center justify-center overflow-hidden bg-transparent transition-all duration-200">
                <div className="flex h-[20px] w-[30px] origin-center transform flex-col justify-between overflow-hidden transition-all duration-300">
                  <div className="w-9.5 h-[2px] origin-left transform bg-violet-500 transition-all duration-300 group-focus:translate-x-10"></div>
                  <div className="w-9.5 h-[2px] transform rounded bg-violet-500 transition-all delay-75 duration-300 group-focus:translate-x-10"></div>
                  <div className="w-9.5 h-[2px] origin-left transform bg-violet-500 transition-all delay-150 duration-300 group-focus:translate-x-10"></div>
                </div>
              </div>
            </button>
          </div>

          <div
            className={`${isOpen ? 'translate-x-0' : 'translate-x-full'} fixed inset-0 z-10 flex h-screen flex-col items-center justify-center bg-white text-violet-500 transition-transform duration-300 dark:bg-violet-500 dark:text-white`}
          >
            <div
              className="absolute right-[4.5rem] top-8 cursor-pointer"
              onClick={() => setOpen(!isOpen)}
            >
              <div
                className={`absolute top-2.5 flex w-7 items-center justify-between transition-all duration-500 ${isOpen ? 'rotate-75' : ''}`}
              >
                <span
                  className={`absolute h-[2px] w-7 transform bg-white transition-all duration-500 ${isOpen ? 'rotate-45' : ''}`}
                />
                <span
                  className={`absolute h-[2px] w-7 transform bg-white transition-all duration-500 ${isOpen ? '-rotate-45' : ''}`}
                />
              </div>
            </div>

            <ul className="flex min-h-[300px] flex-col items-center gap-[4.5rem]">
              {['Serviços', 'Cases', 'Depoimentos', 'Contato'].map((item) => (
                <li key={item} className="relative text-3xl">
                  <a
                    href={`#${item.toLowerCase()}`}
                    onClick={toggleMenu}
                    className="block w-fit after:absolute after:inset-x-0 after:bottom-0 after:h-0.5 after:origin-left after:scale-x-0 after:bg-white after:transition after:duration-300 after:ease-in-out after:content-[''] after:hover:scale-x-100"
                  >
                    {item}
                  </a>
                </li>
              ))}
            </ul>
          </div>
        </section>
      </nav>
    </div>
  )
}
//src/pages/app/home/header/index.tsx
import 'animate.css'

import { useEffect, useState } from 'react'

import LogoB2B from '@/assets/logos/logo.png'
import { ThemeToggle } from '@/components/theme/theme-toggle'
import { BurgerMenu } from '@/pages/app/home/header/burger-menu'

export function Header() {
  const [top, setTop] = useState(true)
  const [isMediumScreen] = useState(window.innerWidth >= 768)

  useEffect(() => {
    const scrollHandler = () => {
      window.scrollY > 10 ? setTop(false) : setTop(true)
    }
    window.addEventListener('scroll', scrollHandler)
    return () => window.removeEventListener('scroll', scrollHandler)
  }, [top])

  return (
    <header>
      <div
        className={`fixed left-0 top-0 z-50 flex h-[72px] w-full items-center justify-between bg-[rgba(34,40,45,0.23)] p-4 py-10 backdrop-blur-[15px] transition-all duration-300 ease-in-out dark:bg-[rgba(34,40,45,0.5)] md:p-0 md:px-24`}
      >
        <div>
          {isMediumScreen ? (
            <a href="/">
              <img
                src={LogoB2B}
                className="w-46 block h-9"
                alt="Logo B2BTech"
              />
            </a>
          ) : (
            <a href="/">
              <img
                src={LogoB2B}
                className="block h-6 w-28"
                alt="Logo B2BTech Mobile"
              />
            </a>
          )}
        </div>

        <nav className="hidden md:block">
          <ul className="flex items-center gap-12 text-base font-semibold text-zinc-700 dark:font-medium dark:text-zinc-100">
            {['Serviços', 'Cases', 'Depoimentos', 'Contato'].map((item) => (
              <li key={item} className="relative">
                <a
                  href={`#${item.toLowerCase()}`}
                  className="ease cursor-pointer transition duration-300 hover:text-violet-500"
                >
                  {item}
                </a>
              </li>
            ))}
          </ul>
        </nav>

        <div className="block">
          <ThemeToggle />
        </div>

        <div className="block md:hidden">{<BurgerMenu />}</div>
      </div>
    </header>
  )
}
//src/../../home/testimonials/index.tsx
import { useEffect, useRef, useState } from 'react'

import { CarouselSize } from './carousel-size'

export function Testimonials() {
  const [isVisible, setIsVisible] = useState(false)
  const sectionRef = useRef<HTMLElement>(null)

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true)
          observer.disconnect()
        }
      },
      {
        threshold: 0.1,
      },
    )

    if (sectionRef.current) {
      observer.observe(sectionRef.current)
    }

    return () => {
      if (sectionRef.current) {
        observer.unobserve(sectionRef.current)
      }
    }
  }, [])

  return (
    <section
      id="depoimentos"
      ref={sectionRef}
      className="absolute bottom-[57rem] left-0 right-0 flex max-w-6xl flex-col items-start justify-center gap-8 p-4 md:static md:mt-6 md:p-0"
    >
      <div className="flex flex-col items-start justify-center space-y-3">
        <span className="backdrop-blur-10 dark:bg-violet-80 flex w-auto items-center justify-center rounded-2xl bg-violet-600 px-2 text-sm font-semibold leading-6 text-zinc-100 dark:bg-opacity-10 dark:text-violet-500 md:w-20 md:p-1 md:text-base">
          s2
        </span>
        <h1
          className={`w-auto transform text-4xl font-bold leading-[3rem] tracking-tighter transition-transform duration-1000 ease-out md:w-full md:text-6xl md:leading-[4.5rem] ${isVisible ? 'translate-y-0' : 'translate-y-full'}`}
        >
          Depoimentos
        </h1>
      </div>

      <div
        className={`relative w-full overflow-hidden ${isVisible ? 'opacity-100' : 'opacity-0'}`}
      >
        <div
          className={`w-auto transform transition-transform duration-1000 ease-out ${isVisible ? 'translate-x-0' : 'translate-x-full'} overflow-hidden ${isVisible ? 'opacity-100' : 'opacity-0'}`}
        >
          <CarouselSize />
        </div>
      </div>
    </section>
  )
}

//carousel-size.tsx
import { Card, CardContent } from '@/components/ui/card'
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from '@/components/ui/carousel'
import { Separator } from '@/components/ui/separator'
import { testimonials } from '@/data/testimonials'

export function CarouselSize() {
  return (
    <Carousel
      opts={{
        align: 'start',
      }}
      className="w-full bg-transparent md:w-calc"
    >
      <CarouselContent>
        {testimonials.map((item) => (
          <CarouselItem
            key={item.id}
            className="basis-1/1 mb-5 ml-4 rounded-md md:basis-1/2 lg:basis-1/3"
          >
            <Card className="w-full border-b-0 border-violet-500 shadow-[1px_10px_12px_2px_rgba(0,0,0,0.69)] md:w-[600px]">
              <CardContent className="flex h-[300px] flex-col items-start justify-between overflow-x-hidden overflow-y-hidden p-8 text-zinc-800 dark:text-zinc-400">
                <div className="flex flex-col items-start gap-3">
                  <span className="mb-10 block h-1.5 w-8 rounded-sm bg-violet-500"></span>
                  <span className="w-full text-start">{item.text}</span>
                  <div className="flex w-full flex-col space-y-5">
                    <Separator />
                    <span className="font-bold">{item.name}</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </CarouselItem>
        ))}
      </CarouselContent>
      <CarouselPrevious />
      <CarouselNext />
    </Carousel>
  )
}
